CREATE TABLE Roles (
    id_role INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(20) NOT NULL UNIQUE,
    description VARCHAR(20) NOT NULL
);

CREATE TABLE Users (
    id_user INT AUTO_INCREMENT PRIMARY KEY,
    login VARCHAR(20) NOT NULL UNIQUE,
    password VARCHAR(15) NOT NULL,
    id_role INT,
    FOREIGN KEY (id_role) REFERENCES Roles(id_role)
);

CREATE TABLE Categories (
    id_categories INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(20) NOT NULL UNIQUE
);

CREATE TABLE Components (
    id_component INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    description VARCHAR(100),
    date_added DATE NOT NULL,
    technical_conditions VARCHAR(20) NOT NULL,
    cost DECIMAL(9, 2) NOT NULL,
    id_categories INT,
    FOREIGN KEY (id_categories) REFERENCES Categories(id_categories),
    adreess VARCHAR(50) NOT NULL
);

CREATE TABLE Declarations (
    id_declaration INT AUTO_INCREMENT PRIMARY KEY,
    id_user INT,
    FOREIGN KEY (id_user) REFERENCES Users(id_user),
    declaration VARCHAR(50) NOT NULL,
    date_declaration DATE NOT NULL,
    id_component INT,
    FOREIGN KEY (id_component) REFERENCES Components(id_component)
);

CREATE TABLE Repaired (
    id_repair INT AUTO_INCREMENT PRIMARY KEY,
    date_repair DATE NOT NULL,
    description VARCHAR(255),
    id_component INT,
    FOREIGN KEY (id_component) REFERENCES Components(id_component)
);

CREATE TABLE Rating (
    id_rating INT AUTO_INCREMENT PRIMARY KEY,
    id_component INT,
    FOREIGN KEY (id_component) REFERENCES Components(id_component),
    id_user INT,
    FOREIGN KEY (id_user) REFERENCES Users(id_user),
    grade INT
);

CREATE TABLE Removed (
    id_remove INT AUTO_INCREMENT PRIMARY KEY,
    date_remove DATE NOT NULL,
    reason VARCHAR(50) NOT NULL,
    id_component INT,
    FOREIGN KEY (id_component) REFERENCES Components(id_component)
);

Запросы 

Дни с последней поломки
SELECT 
    DATEDIFF(CURRENT_DATE, MAX(date_declaration)) as days_since_last_breakdown
FROM 
    Declarations
WHERE 
    declaration LIKE '%поломка%';

Общее количество поломок
SELECT 
    COUNT(*) as total_breakdowns
FROM 
    Declarations
WHERE 
    declaration LIKE '%поломка%';

Средняя оценка компонентов
SELECT 
    AVG(grade) as average_rating
FROM 
    Rating;

Частота поломок
SELECT 
    c.id_component,
    c.name,
    COUNT(d.id_declaration) as total_breakdowns,
    DATEDIFF(CURRENT_DATE, c.date_added) as days_in_use,
    CASE 
        WHEN COUNT(d.id_declaration) = 0 THEN 0
        ELSE ROUND(DATEDIFF(CURRENT_DATE, c.date_added) / COUNT(d.id_declaration), 2)
    END as average_days_between_breakdowns
FROM 
    Components c
LEFT JOIN 
    Declarations d ON c.id_component = d.id_component
    AND d.declaration LIKE '%поломка%'
GROUP BY 
    c.id_component, c.name
HAVING 
    total_breakdowns > 0;
